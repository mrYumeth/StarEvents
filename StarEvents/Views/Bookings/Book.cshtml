@model StarEvents.ViewModels.EventDetailsViewModel
@{
    ViewData["Title"] = "Book Tickets";
    var errorMessage = TempData["ErrorMessage"] as string;
    var successMessage = TempData["SuccessMessage"] as string;
}

<style>
    /* Your CSS remains the same */
    .booking-container {
        max-width: 1000px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .booking-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .event-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
    }

        .event-header h2 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

    .event-meta {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        margin-top: 15px;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .booking-form {
        padding: 40px;
    }

    .form-section {
        margin-bottom: 30px;
    }

        .form-section h3 {
            font-size: 1.3rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }

    .ticket-selector {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-top: 15px;
    }

    .quantity-btn {
        width: 40px;
        height: 40px;
        border: 2px solid #667eea;
        background: white;
        color: #667eea;
        border-radius: 50%;
        font-size: 1.2rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .quantity-btn:hover:not(:disabled) {
            background: #667eea;
            color: white;
        }

        .quantity-btn:disabled {
            opacity: 0.3;
            cursor: not-allowed;
        }

    .quantity-input {
        width: 80px;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 700;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 8px;
    }

    .price-summary {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 10px;
        margin-top: 30px;
        color: #333 !important;
    }

    .price-row {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        font-size: 1rem;
    }

        .price-row.total {
            border-top: 2px solid #dee2e6;
            margin-top: 10px;
            padding-top: 15px;
            font-size: 1.3rem;
            font-weight: 700;
            color: #667eea;
        }

    .promo-input-group {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .promo-input {
        flex: 1;
        padding: 10px 15px;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        font-size: 1rem;
    }

    .btn-apply-promo {
        padding: 10px 25px;
        background: white;
        color: #667eea;
        border: 2px solid #667eea;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-apply-promo:hover {
            background: #667eea;
            color: white;
        }

    .btn-book-now {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px 40px;
        border-radius: 25px;
        font-size: 1.1rem;
        font-weight: 600;
        width: 100%;
        margin-top: 20px;
        transition: transform 0.3s ease;
    }

        .btn-book-now:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

    .promo-hint {
        font-size: 0.85rem;
        color: #666;
        margin-top: 10px;
    }

    .available-tickets {
        color: #28a745;
        font-weight: 600;
    }
</style>

<div class="booking-container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
    <div id="js-message-area" style="margin-bottom: 20px;"></div>

    @if (Model == null)
    {
        <div class="alert alert-warning">Event data could not be loaded.</div>
    }
    else
    {
        <div class="booking-card">
            <div class="event-header">
                <h2>@Model.Title</h2>
                <div class="event-meta">
                    <div class="meta-item">📅 @Model.DateDisplay</div>
                    <div class="meta-item">📍 @Model.VenueCity</div>
                    <div class="meta-item">🎭 @Model.Category</div>
                </div>
            </div>

            <form asp-action="Book" asp-controller="Bookings" method="post" id="bookingForm" class="booking-form">
                @Html.AntiForgeryToken()
                <input type="hidden" name="EventId" value="@Model.Id" />

                <div class="form-section">
                    <h3>🎫 Select Tickets</h3>
                    <div class="ticket-selector">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>Standard Ticket</strong>
                                <div class="text-muted">@Model.TicketPrice per ticket</div>
                                <div class="available-tickets mt-2">@Model.AvailableTickets tickets available</div>
                            </div>
                            <div class="quantity-control">
                                <button type="button" class="quantity-btn" id="decreaseBtn">−</button>
                                <input type="number" name="Quantity" id="quantityInput" class="quantity-input" value="1" min="1" max="@Model.AvailableTickets" readonly required />
                                <button type="button" class="quantity-btn" id="increaseBtn">+</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h3>🎁 Promo Code (Optional)</h3>
                    <div class="promo-input-group">
                        <input type="text" name="PromoCode" id="promoCode" class="promo-input" placeholder="Enter promo code" />
                        <button type="button" class="btn-apply-promo">Apply</button>
                    </div>
                </div>

                <div class="price-summary">
                    <h4 style="margin-bottom: 15px;">Order Summary</h4>
                    <div class="price-row">
                        <span>Ticket Price:</span>
                        <span id="unitPrice">@Model.TicketPrice</span>
                    </div>
                    <div class="price-row">
                        <span>Quantity:</span>
                        <span id="quantityDisplay">1</span>
                    </div>
                    <div class="price-row">
                        <span>Subtotal:</span>
                        <span id="subtotal">@Model.TicketPrice</span>
                    </div>
                    <div class="price-row" id="discountRow" style="display: none; color: #28a745;">
                        <span>Discount:</span>
                        <span>- LKR <span id="discount">0.00</span></span>
                    </div>
                    <div class="price-row total">
                        <span>Total Amount:</span>
                        <span id="total">@Model.TicketPrice</span>
                    </div>
                </div>

                <button type="submit" class="btn-book-now">Proceed to Payment →</button>
            </form>
        </div>
    }
</div>

@section Scripts {
    <script>
        // JS Function to display dynamic messages
        function displayMessage(type, message) {
            const area = document.getElementById('js-message-area');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            area.innerHTML = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
        }

        const bookingForm = document.getElementById('bookingForm');
        if (bookingForm) {
            const ticketPrice = parseFloat('@Model.TicketPrice'.replace(/[^0-9.-]+/g, ""));
            const maxTickets = parseInt('@Model.AvailableTickets');
            let currentQuantity = 1;
            let discountPercent = 0;

            // Get element references
            const quantityInput = document.getElementById('quantityInput');
            const quantityDisplay = document.getElementById('quantityDisplay');
            const decreaseBtn = document.getElementById('decreaseBtn');
            const increaseBtn = document.getElementById('increaseBtn');
            const subtotalEl = document.getElementById('subtotal');
            const discountEl = document.getElementById('discount');
            const totalEl = document.getElementById('total');
            const discountRow = document.getElementById('discountRow');
            const promoCodeInput = document.getElementById('promoCode');
            const messageArea = document.getElementById('js-message-area');

            function updateQuantity() {
                quantityInput.value = currentQuantity;
                quantityDisplay.textContent = currentQuantity;
                decreaseBtn.disabled = currentQuantity <= 1;
                increaseBtn.disabled = currentQuantity >= maxTickets;
                calculateTotal();
            }

            function increaseQuantity() {
                if (currentQuantity < maxTickets) {
                    currentQuantity++;
                    updateQuantity();
                }
            }

            function decreaseQuantity() {
                if (currentQuantity > 1) {
                    currentQuantity--;
                    updateQuantity();
                }
            }

            function calculateTotal() {
                const subtotal = ticketPrice * currentQuantity;
                const discount = subtotal * discountPercent;
                const total = subtotal - discount;

                // Update UI with currency formatting for consistency
                subtotalEl.textContent = `LKR ${subtotal.toFixed(2)}`;
                discountEl.textContent = discount.toFixed(2); // The "LKR" is already in the HTML for this element
                totalEl.textContent = `LKR ${total.toFixed(2)}`;

                discountRow.style.display = discount > 0 ? 'flex' : 'none';
            }

            // --- THIS IS THE CORRECTED PROMO CODE LOGIC ---
        function applyPromo() {
            const promoCode = promoCodeInput.value.trim().toUpperCase();
            messageArea.innerHTML = ''; // Now this will work!

            if (promoCode === 'STAREVENTS') {
                discountPercent = 0.10;
                displayMessage('success', 'Promo code "STAREVENTS" applied successfully!');
            } else if (promoCode !== '') {
                discountPercent = 0;
                displayMessage('danger', `Invalid promo code: ${promoCodeInput.value}`);
            } else {
                discountPercent = 0;
            }
            calculateTotal();
        }

            // Add event listeners
            decreaseBtn.addEventListener('click', decreaseQuantity);
            increaseBtn.addEventListener('click', increaseQuantity);
            document.querySelector('.btn-apply-promo').addEventListener('click', applyPromo);

            // Initial calculation on page load
            updateQuantity();
        } else {
            console.error("Booking form not found. Scripts will not be initialized.");
        }
    </script>
}