@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "Manage Users";
    // Define the list of roles available in the system for the dropdown.
    var allRoles = new List<string> { "Admin", "Organizer", "Customer" };
}

<style>
    .manage-users-container {
        padding: 40px 0;
    }

    .page-header {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        padding: 30px 40px;
        border-radius: 15px;
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .page-header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

    .stats-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.07);
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .stat-icon {
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .stat-value {
        font-size: 2.2rem;
        font-weight: 700;
        color: #007bff;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #666;
        margin-top: 5px;
    }

    .search-box {
        margin-bottom: 30px;
    }

    .search-input {
        width: 100%;
        padding: 12px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 25px;
        font-size: 1rem;
    }

        .search-input:focus {
            border-color: #007bff;
            outline: none;
        }

    .users-table-container {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        overflow-x: auto;
    }

    .users-table {
        width: 100%;
        min-width: 900px;
        border-collapse: collapse;
    }

        .users-table thead th {
            background: #f8f9fa;
            padding: 15px;
            text-align: left;
            font-weight: 700;
            border-bottom: 2px solid #dee2e6;
        }

        .users-table tbody td {
            padding: 15px;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: middle;
        }

    .user-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #007bff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 1.2rem;
    }

    .user-details {
        display: flex;
        flex-direction: column;
    }

    .user-name {
        font-weight: 600;
    }

    .user-email {
        font-size: 0.85rem;
        color: #999;
    }

    .role-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-block;
    }

    .role-admin {
        background: #f8d7da;
        color: #721c24;
    }

    .role-organizer {
        background: #fff3cd;
        color: #856404;
    }

    .role-customer {
        background: #d4edda;
        color: #155724;
    }

    .status-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .status-active {
        background: #d4edda;
        color: #155724;
    }

    .status-inactive {
        background: #f8d7da;
        color: #721c24;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
    }

    .btn-action {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-edit {
        background: #cce5ff;
        color: #004085;
    }

    .btn-disable {
        background: #ffdf7e;
        color: #856404;
    }
</style>

<div class="manage-users-container">
    <div class="container">
        <!-- Header -->
        <div class="page-header">
            <h1>👥 Manage Users</h1>
            <a href="@Url.Action("Dashboard", "Admin")" class="btn btn-light">← Back to Dashboard</a>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Statistics -->
        <div class="stats-row">
            <div class="stat-card">
                <div class="stat-icon">👥</div>
                <div class="stat-value">@Model.Count()</div>
                <div class="stat-label">Total Users</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🛡️</div>
                <div class="stat-value">@Model.Count(u => ((IList<string>)u.Roles).Contains("Admin"))</div>
                <div class="stat-label">Admins</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🎭</div>
                <div class="stat-value">@Model.Count(u => ((IList<string>)u.Roles).Contains("Organizer"))</div>
                <div class="stat-label">Organizers</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🎫</div>
                <div class="stat-value">@Model.Count(u => ((IList<string>)u.Roles).Contains("Customer"))</div>
                <div class="stat-label">Customers</div>
            </div>
        </div>

        <!-- Search Box -->
        <div class="search-box">
            <input type="text" id="searchInput" class="search-input"
                   placeholder="🔍 Search by name or email..."
                   onkeyup="filterUsers()">
        </div>

        <!-- Users Table -->
        <div class="users-table-container">
            <table class="users-table" id="usersTable">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Loyalty Points</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var userWithRole in Model)
                    {
                        var user = (StarEvents.Models.ApplicationUser)userWithRole.User;
                        var roles = (IList<string>)userWithRole.Roles;
                        var primaryRole = roles.FirstOrDefault() ?? "N/A";
                        <tr>
                            <td>
                                <div class="user-info">
                                    <div class="user-avatar">
                                        @if (!string.IsNullOrEmpty(user.FirstName))
                                        {
                                            @user.FirstName.Substring(0, 1).ToUpper()
                                        }
                                        else
                                        {
                                            <span>?</span>
                                        }
                                    </div>
                                    <div class="user-details">
                                        <span class="user-name">@user.FirstName @user.LastName</span>
                                        <span class="user-email">@user.UserName</span>
                                    </div>
                                </div>
                            </td>
                            <td>@user.Email</td>
                            <td>
                                <span class="role-badge role-@primaryRole.ToLower()">@primaryRole</span>
                            </td>
                            <td>
                                <strong>@user.LoyaltyPoints</strong> pts
                            </td>
                            <td>
                                <span class="status-badge status-@(user.EmailConfirmed ? "active" : "inactive")">
                                    @(user.EmailConfirmed ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button type="button" class="btn-action btn-edit" title="Edit Details"
                                            onclick="viewUserDetails('@user.Id')">
                                        👁️
                                    </button>
                                    @if (!roles.Contains("Admin"))
                                    {
                                        <button type="button" class="btn-action btn-disable" title="Change Role"
                                                onclick="showChangeRoleModal('@user.Id', '@(user.FirstName + " " + user.LastName)', '@primaryRole')">
                                            🔄
                                        </button>

                                        <button type="button" class="btn-action btn-delete" title="Delete User"
                                                onclick="showDeleteUserModal('@user.Id', '@(user.FirstName + " " + user.LastName)')">
                                            🗑️
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- User Details Modal -->
<div class="modal fade" id="userDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="userDetailsContent">
                <!-- User details form will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Change Role Modal -->
<div class="modal fade" id="changeRoleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="ChangeUserRole" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Change User Role</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="userId" id="roleChangeUserId" />
                    <p>Change role for <strong id="roleChangeUserName"></strong>?</p>
                    <div class="form-group">
                        <label for="newRole">New Role</label>
                        <select name="newRole" id="newRole" class="form-control">
                            @foreach (var role in allRoles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!--Delete User Model-->
<div class="modal fade" id="deleteUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="DeleteUser" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="userId" id="deleteUserId" />
                    <p>Are you sure you want to permanently delete the user <strong id="deleteUserName"></strong>?</p>
                    <div class="alert alert-danger"><strong>Warning:</strong> This action cannot be undone.</div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete User</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search/Filter functionality
        function filterUsers() {
            const input = document.getElementById('searchInput');
            const filter = input.value.toLowerCase();
            const table = document.getElementById('usersTable');
            const rows = table.getElementsByTagName('tr');

            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const text = row.textContent || row.innerText;
                if (text.toLowerCase().indexOf(filter) > -1) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            }
        }

        // View user details
        function viewUserDetails(userId) {
            const modalBody = document.getElementById('userDetailsContent');
            modalBody.innerHTML = '<div class="text-center p-4"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            fetch(`/Admin/GetUserDetails?id=${userId}`)
                .then(response => {
                    if (!response.ok) { throw new Error('Network response was not ok'); }
                    return response.text();
                })
                .then(html => {
                    modalBody.innerHTML = html;
                    var modal = new bootstrap.Modal(document.getElementById('userDetailsModal'));
                    modal.show();
                })
                .catch(error => {
                    modalBody.innerHTML = '<p class="text-danger p-4">Failed to load user details. Please try again.</p>';
                    console.error('Error fetching user details:', error);
                });
        }

        // Show change role modal
        function showChangeRoleModal(userId, userName, currentRole) {
            document.getElementById('roleChangeUserId').value = userId;
            document.getElementById('roleChangeUserName').textContent = userName;
            document.getElementById('newRole').value = currentRole;
            var modal = new bootstrap.Modal(document.getElementById('changeRoleModal'));
            modal.show();
        }
        // Show Delete Model
        function showDeleteUserModal(userId, userName) {
            document.getElementById('deleteUserId').value = userId;
            document.getElementById('deleteUserName').textContent = userName;
            var modal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
            modal.show();
        }
    </script>
}

